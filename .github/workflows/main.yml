name: Shared Workflows
on:
  workflow_call:
    inputs:
      project_name:
        type: string
        required: true
        description: Workflow caller project name
      project_environment:
        type: string
        required: true
        description: Project workflow environment
      project_language:
        type: string
        required: true
        description: Project language
      project_language_version:
        type: string
        required: true
        description: Project language version
      test_services:
        type: string
        default: '[]'
        required: false
        description: List of service images used for integration test (postgresql / redis)
      e2e_test_type:
        type: string
        required: true
        description: End to end test type
      postman_collection_path:
        type: string
        required: false
        description: Used by Postman / Newman end to end test
      docker_image_name:
        type: string
        required: false
        description: Docker container image name
      docker_image_tag:
        type: string
        required: false
        description: Docker container image tag
jobs:
  validate_inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    steps:
      - id: validate
        name: Validate inputs
        env:
          PROJECT_NAME: ${{ inputs.project_name }}
          PROJECT_ENVIRONMENT: ${{ inputs.project_environment }}
          PROJECT_LANGUAGE: ${{ inputs.project_language }}
          PROJECT_LANGUAGE_VERSION: ${{ inputs.project_language_version }}
          TEST_SERVICES: ${{ inputs.test_services }}
          E2E_TEST_TYPE: ${{ inputs.e2e_test_type }}
          POSTMAN_COLLECTION_PATH: ${{ inputs.postman_collection_path }}
          DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}
          DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}
        run: |
          echo === GENERAL INPUT ===
          echo "project name\t\t: $PROJECT_NAME"
          echo "project environment\t: $PROJECT_ENVIRONMENT"
          echo "project language\t: $PROJECT_LANGUAGE"
          echo "project language ver\t: $PROJECT_LANGUAGE_VERSION"
          echo "test services\t\t: $TEST_SERVICES"
          echo "end to end test type\t: $E2E_TEST_TYPE"

          if [[ $E2E_TEST_TYPE == 'postman' || $E2E_TEST_TYPE == 'newman' ]]; then
            echo === POSTMAN / NEWMAN INPUT ===
            echo "postman collection path\t: $POSTMAN_COLLECTION_PATH"
            if [[ -z $POSTMAN_COLLECTION_PATH ]]; then
              echo ::error title=Validation error::Collection path empty
              exit 1
            fi
          fi

          if [[ -n $DOCKER_IMAGE_NAME || -n $DOCKER_IMAGE_TAG ]]; then
            echo === DOCKER INPUT ===
            echo "docker image name\t: $DOCKER_IMAGE_NAME"
            echo "docker image tag\t: $DOCKER_IMAGE_TAG"
            WITH_DOCKER=true
            echo "WITH_DOCKER=$WITH_DOCKER" >> "$GITHUB_OUTPUT"
          fi

          if [[ -n $WITH_DOCKER && ( -z $DOCKER_IMAGE_NAME || -z $DOCKER_IMAGE_TAG ) ]]; then
            echo ::error title=Validation error::Docker input incomplete
            exit 1
          fi
    outputs:
      with-docker: ${{ steps.validate.outputs.WITH_DOCKER }}

  static_analysis:
    name: Static Analysis
    needs: validate_inputs
    runs-on: ubuntu-latest
    steps:
      - if: ${{ inputs.project_language == 'nodejs' }}
        uses: kmhalpin/workflows/actions/static-analysis/nodejs@main
        with:
          nodejs_version: ${{ inputs.project_language_version }}

  unit_test:
    name: Unit Test
    needs: static_analysis
    runs-on: ubuntu-latest
    steps:
      - if: ${{ inputs.project_language == 'nodejs' }}
        uses: kmhalpin/workflows/actions/unit-test/nodejs@main
        with:
          nodejs_version: ${{ inputs.project_language_version }}

  integration_test:
    name: Integration Test
    needs: unit_test
    runs-on: ubuntu-latest
    services:
      postgresql:
        image: ${{ contains(fromJSON(inputs.test_services), 'postgres') && 'postgres' || '' }}
        env:
          POSTGRES_PASSWORD: postgres
        options: |-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: ${{ contains(fromJSON(inputs.test_services), 'redis') && 'redis' || '' }}
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@v4
    - if: ${{ inputs.project_language == 'nodejs' }}
      uses: kmhalpin/workflows/actions/nodejs@main
      with:
        nodejs_version: ${{ inputs.project_language_version }}
    - if: ${{ inputs.project_language == 'nodejs' }}
      name: Run integration test
      run: |
        npm run migrate up
        npm run test int
      env:
        PGHOST: localhost
        PGUSER: postgres
        PGDATABASE: postgres
        PGPASSWORD: postgres
        PGPORT: 5432
        REDISHOST: localhost
        REDISPORT: 6379

  end_to_end_test:
    name: End To End Test
    needs: integration_test
    runs-on: ubuntu-latest
    services:
      postgresql:
        image: ${{ contains(fromJSON(inputs.test_services), 'postgres') && 'postgres' || '' }}
        env:
          POSTGRES_PASSWORD: postgres
        options: |-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: ${{ contains(fromJSON(inputs.test_services), 'redis') && 'redis' || '' }}
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4
      - if: ${{ inputs.project_language == 'nodejs' }}
        uses: kmhalpin/workflows/actions/nodejs@main
        with:
          nodejs_version: ${{ inputs.project_language_version }}
      - if: ${{ inputs.e2e_test_type == 'postman' }}
        uses: kmhalpin/workflows/actions/end-to-end-test/postman/install@main
      - if: ${{ (inputs.e2e_test_type == 'postman' || inputs.e2e_test_type == 'newman') && inputs.project_language == 'nodejs' }}
        name: Run app
        run: |
          npm run migrate up
          nohup npm start &
          sleep 60
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGDATABASE: postgres
          PGPASSWORD: postgres
          PGPORT: 5432
          REDISHOST: localhost
          REDISPORT: 6379
      - if: ${{ inputs.e2e_test_type == 'postman' }}
        uses: kmhalpin/workflows/actions/end-to-end-test/postman@main
        with:
          collection_path: ${{ inputs.postman_collection_path }}
      - if: ${{ inputs.e2e_test_type == 'newman' }}
        uses: kmhalpin/workflows/actions/end-to-end-test/newman@main
        with:
          collection_path: ${{ inputs.postman_collection_path }}

  container_image_creation:
    name: Build And Push Container Image
    needs: [validate_inputs, end_to_end_test]
    if: needs.validate_inputs.outputs.with-docker
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-region: ap-southeast-1
          role-to-assume: arn:aws:iam::024538648017:role/github-aws-oidc-Role-18XJ1TB4PP64X
      - name: Retrieve secrets from aws secret manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v1
        with:
          secret-ids: |
            SECRET,github_workflows
          parse-json-secrets: true
      - id: docker
        uses: kmhalpin/workflows/actions/docker@main
        with:
          docker_image_name: ${{ inputs.docker_image_name }}
          docker_image_tag: ${{ inputs.docker_image_tag }}
